{"version":3,"sources":["const/gameStates.js","const/cells.js","const/states.js","views/Cell/index.js","views/Minesweeper/index.js","views/Timer/index.js","views/Scoreboard/index.js","views/App/index.js","utils/createMineField.js","utils/updateMatrixValue.js","utils/showEmptyCellsAround.js","utils/pipe.js","store/actionHandlers.js","store/index.js","index.js"],"names":["WAITING","PLAYING","LOSS","WIN","EMPTY","MINE","CLOSED","OPENED","FLAGGED","SUSPICIOUS","EXPLODED","Cell","onRightClick","event","preventDefault","_this","props","onItemRightClick","getItemContentByType","type","getClassNameByState","itemState","prefix","getClassNameByType","this","itemElement","addEventListener","removeEventListener","_this2","content","classList","classNames","react_default","a","createElement","className","onClick","onItemClick","ref","el","Component","Minesweeper","openTheCell","x","y","gameState","dispatch","payload","minefield","map","column","key","Array","from","item","Cell_Cell","statemap","connect","Timer","state","timeStart","time","timeUpdate","setState","Date","now","getMinutes","timestamp","getSeconds","toFixed","nextProps","curGameState","nextGameState","clearInterval","interval","setInterval","onTimerEnd","Scoreboard","getEmojiByGameState","isHold","startGame","minesLeft","mines","flags","Timer_Timer","App","_this$props","views_Scoreboard","views_Minesweeper","createMineField","width","height","fill","Uint8Array","minesGenerated","Math","random","offsets","reduce","counter","offset","curX","curY","updateMatrixValue","value","matrix","columnCopy","slice","matrixCopy","showEmptyCellsAround","undefined","statemapWithOpenedCell","functionsList","_ref","_ref2","Object","slicedToArray","offsetX","offsetY","_len","arguments","length","fns","_key","v","f","apply","toConsumableArray","pipe","init","objectSpread","makeMapByPoint","action","_action$payload","i","Error","openCell","_action$payload2","cellState","cellType","statemapWithOpenedMines","newStatemap","acc","winStatemap","start","isPlaying","resize","heigth","setMines","toggleFlag","_action$payload3","curCellState","nextCellState","currentFlags","initialState","actionHandlers","createStore","handleActions","INIT","MAKE_MAP_BY_POINT","OPEN_CELL","START","RESIZE","SET_MINES","TOGGLE_FLAG","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","store","views_App","document","getElementById"],"mappings":"oUAGaA,SAAU,GACVC,EAAU,EACVC,EAAO,EACPC,EAAM,mBCFNC,SAAQ,GACRC,EAAO,ECFPC,EAAS,EACTC,EAAS,EACTC,EAAU,EACVC,EAAa,EACbC,EAAW,ECKHC,6MA+BnBC,aAAe,SAAAC,GACbA,EAAMC,iBAEqC,oBAAhCC,EAAKC,MAAMC,kBACpBF,EAAKC,MAAMC,iBAAiBJ,MAQhCK,qBAAuB,SAAAC,GACrB,OAAQA,GACN,KAAKd,EACH,MAAO,eACT,KAAKD,EACH,MAAO,GAET,QACE,OAAOe,MAQbC,oBAAsB,SAAAC,GAGpB,OAAQA,GACN,KAAKd,EACH,MAAOe,eACT,KAAKZ,EACH,MAAOY,iBACT,KAAKhB,EACH,MAAOgB,eACT,KAAKb,EACH,MAAOa,gCACT,KAAKd,EACH,MAAOc,6BAET,QACE,MAAOA,mBAQbC,mBAAqB,SAAAJ,GACnB,OAAIA,GAAQ,GAAKA,GAAQ,EAChB,SAAWA,EAGb,uFAtFPK,KAAKC,YAAYC,iBAAiB,cAAeF,KAAKZ,6DAItDY,KAAKC,YAAYE,oBAAoB,cAAeH,KAAKZ,+CAGlD,IAAAgB,EAAAJ,KACDK,EAAUL,KAAKN,qBAAqBM,KAAKR,MAAMG,MAC/CW,EAAYC,IAChB,OACAP,KAAKJ,oBAAoBI,KAAKR,MAAMK,WACpCG,KAAKD,mBAAmBC,KAAKR,MAAMG,OAGrC,OACEa,EAAAC,EAAAC,cAAA,OACEC,UAAWL,EACXM,QAASZ,KAAKR,MAAMqB,YACpBC,IAAK,SAAAC,GAAE,OAAKX,EAAKH,YAAcc,IAE/BP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBN,WAvBPW,aCN5BC,6MAwBJC,YAAc,SAACC,EAAGC,GAAJ,OAAU,SAAA/B,GAElBE,EAAKC,MAAM6B,YAAc7C,GAC3Be,EAAKC,MAAM8B,SAAS,CAClB3B,KAAM,oBACN4B,QAAS,CAAEJ,IAAGC,OAIlB7B,EAAKC,MAAM8B,SAAS,CAClB3B,KAAM,YACN4B,QAAS,CAAEJ,IAAGC,WAOlB3B,iBAAmB,SAAC0B,EAAGC,GAAJ,OAAU,SAAA/B,GAC3BE,EAAKC,MAAM8B,SAAS,CAClB3B,KAAM,cACN4B,QAAS,CAAEJ,IAAGC,iFA5CT,IAAAhB,EAAAJ,KACP,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZX,KAAKR,MAAMgC,UAAUC,IAAI,SAACC,EAAQP,GAAT,OACxBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASgB,IAAK,UAAYR,GACtCS,MAAMC,KAAKH,GAAQD,IAAI,SAACK,EAAMV,GAAP,OACtBZ,EAAAC,EAAAC,cAACqB,EAAD,CACEJ,IAAK,QAAUP,EACfzB,KAAMmC,EACNjC,UAAWO,EAAKZ,MAAMwC,SAASb,GAAGC,GAClCP,YAAaT,EAAKc,YAAYC,EAAGC,GACjC3B,iBAAkBW,EAAKX,iBAAiB0B,EAAGC,kBAZjCJ,aAkDXiB,gBAAUhB,GCrDJiB,oNACnBC,MAAQ,CACNC,UAAW,EACXC,KAAM,KAgDRC,WAAa,WACX/C,EAAKgD,SAAS,CACZF,KAAMG,KAAKC,MAAQlD,EAAK4C,MAAMC,eASlCM,WAAa,SAAAC,GAAS,OAAKA,EAAY,GAAK,IAAO,KAOnDC,WAAa,SAAAD,GAAS,OAAMA,EAAS,IAAkB,KAAME,QAAQ,6FA/D3CC,GACxB,IAAMC,EAAe/C,KAAKR,MAAM6B,UAC1B2B,EAAgBF,EAAUzB,UAE5B0B,IAAiBvE,GAAWwE,IAAkBxE,GAEhDyE,cAAcjD,KAAKkD,UAEnBlD,KAAKuC,SAAS,CACZH,UAAW,EACXC,KAAM,KAECU,IAAiBtE,GAAWuE,IAAkBvE,GAEvDuB,KAAKuC,SAAS,CACZH,UAAWI,KAAKC,MAChBJ,KAAM,IAGRrC,KAAKkD,SAAWC,YAAYnD,KAAKsC,WAAY,KAE7CS,IAAiBpE,GACjBoE,IAAiBrE,GAChBsE,IAAkBrE,GAAOqE,IAAkBtE,IAG5CuE,cAAcjD,KAAKkD,UAEkB,oBAA1BlD,KAAKR,MAAM4D,YACpBpD,KAAKR,MAAM4D,WAAWpD,KAAKmC,MAAME,wCAMrC,OACE7B,EAAAC,EAAAC,cAAA,YACGV,KAAK0C,WAAW1C,KAAKmC,MAAME,MAD9B,IACsCrC,KAAK4C,WAAW5C,KAAKmC,MAAME,cA3CpCrB,cCG7BqC,6MA2BJC,oBAAsB,SAACjC,EAAWkC,GAChC,GAAIA,EACF,MAAO,eAGT,OAAQlC,GACN,KAAK1C,EACH,MAAO,eACT,KAAKD,EACH,MAAO,eACT,QACE,MAAO,mBAOb8E,UAAY,WACVjE,EAAKC,MAAM8B,SAAS,CAClB3B,KAAM,kFA7CR,IAAM8D,EAAYzD,KAAKR,MAAMkE,MAAQ1D,KAAKR,MAAMmE,MAEhD,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZ8C,EADH,KAIAjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,QAASZ,KAAKwD,WACnCxD,KAAKsD,oBAAoBtD,KAAKR,MAAM6B,UAAWrB,KAAKR,MAAM+D,SAG7D/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACkD,EAAD,CAAOvC,UAAWrB,KAAKR,MAAM6B,qBAfdL,aAoDViB,gBAAUoB,GCpDnBQ,0LACK,IAAAC,EACkD9D,KAAKR,MAAtDgC,EADDsC,EACCtC,UAAWQ,EADZ8B,EACY9B,SAAUX,EADtByC,EACsBzC,UAAWqC,EADjCI,EACiCJ,MAAOC,EADxCG,EACwCH,MAE/C,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACqD,EAAD,CAAY1C,UAAWA,EAAWqC,MAAOA,EAAOC,MAAOA,IAEvDnD,EAAAC,EAAAC,cAACsD,EAAD,CACExC,UAAWA,EACXQ,SAAUA,EACVX,UAAWA,aAZLL,cA4BHiB,cARS,SAAAE,GAAK,MAAK,CAChCX,UAAWW,EAAMX,UACjBQ,SAAUG,EAAMH,SAChBX,UAAWc,EAAMd,UACjBqC,MAAOvB,EAAMuB,MACbC,MAAOxB,EAAMwB,QAGA1B,CAAyB4B,0BCxBzB,SAASI,EAAgBC,EAAOC,EAAQT,GAErD,GAAIA,EAAQQ,EAAQC,EAClB,OAAOF,EAAgBC,EAAOC,EAAQD,EAAQC,GAUhD,IANA,IAAM3C,EAAY,IAAII,MAAMsC,GACzBE,KAAK,MACL3C,IAAI,SAAAK,GAAI,OAAI,IAAIuC,WAAWF,KAG1BG,EAAiB,EACdA,EAAiBZ,GAAO,CAC7B,IAAMvC,EAAKoD,KAAKC,SAAWN,EAAS,EAC9B9C,EAAKmD,KAAKC,SAAWL,EAAU,EAGjC3C,EAAUL,GAAGC,KAAOvC,IAIxB2C,EAAUL,GAAGC,GAAKvC,EAClByF,KAIF,IAAMG,EAAU,CACd,EAAE,EAAG,GACL,EAAE,GAAI,GACN,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,IAsBP,OAlBsBjD,EAAUC,IAAI,SAACC,EAAQP,GAC3C,OAAOO,EAAOD,IAAI,SAACK,EAAMV,GACvB,OAAIU,IAASlD,EACJkD,EAIF2C,EAAQC,OAAO,SAACC,EAASC,GAC9B,IAAMC,EAAO1D,EAAIyD,EAAO,GAClBE,EAAO1D,EAAIwD,EAAO,GAExB,OAAOpD,EAAUqD,IAASrD,EAAUqD,GAAMC,KAAUjG,EAChD8F,EAAU,EACVA,GACH,OCtDM,SAASI,EAAkBC,EAAO7D,EAAGC,EAAG6D,GACrD,IAAMC,EAAaD,EAAO9D,GAAGgE,QAC7BD,EAAW9D,GAAK4D,EAEhB,IAAMI,EAAaH,EAAOE,QAG1B,OAFAC,EAAWjE,GAAK+D,EAETE,sBCRT,IAAMX,EAAU,CACd,EAAE,EAAG,GACL,EAAE,GAAI,GACN,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,IAWQ,SAASY,EAAqBlE,EAAGC,EAAGI,EAAWQ,GAC5D,QAAoBsD,IAAhBtD,EAASb,SAAuCmE,IAAnBtD,EAASb,GAAGC,GAC3C,OAAOY,EAGT,GAAIA,EAASb,GAAGC,KAAOrC,EACrB,OAAOiD,EAIT,IAAMuD,EACJvD,EAASb,GAAGC,KAAOpC,EACf+F,EAAkBhG,EAAQoC,EAAGC,EAAGY,GAChCA,EAEN,GAAIR,EAAUL,GAAGC,KAAOxC,EACtB,OAAO2G,EAGT,IAAMC,EAAgBf,EAAQhD,IAAI,SAAAgE,GAAwB,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAAtBI,EAAsBH,EAAA,GAAbI,EAAaJ,EAAA,GACxD,OAAO,SAAAjE,GAAG,OACR4D,EAAqBlE,EAAI0E,EAASzE,EAAI0E,EAAStE,EAAWC,MAI9D,OC/Ca,WAAsB,QAAAsE,EAAAC,UAAAC,OAALC,EAAK,IAAAtE,MAAAmE,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAALD,EAAKC,GAAAH,UAAAG,GACnC,OAAO,SAAAhF,GAAC,OAAI+E,EAAIxB,OAAO,SAAC0B,EAAGC,GAAJ,OAAUA,EAAED,IAAIjF,KD6CXmF,WAAJ,EAAAX,OAAAY,EAAA,EAAAZ,CAAQH,GAARgB,CAAuBjB,GEzC1C,SAASkB,EAAKtE,GACnB,OAAOwD,OAAAe,EAAA,EAAAf,CAAA,GACFxD,EADL,CAEEX,UAAWyC,EAAgB9B,EAAM+B,MAAO/B,EAAMgC,OAAQhC,EAAMuB,OAC5D1B,SAAUJ,MAAMO,EAAM+B,OACnBE,UAAKkB,GACL7D,IAAI,SAAAC,GAAM,OAAI,IAAI2C,WAAWlC,EAAMgC,UACtC9C,UAAW7C,EACXmF,MAAO,IAQJ,SAASgD,EAAexE,EAAOyE,GAMpC,IAN4C,IAGxCpF,EAHwCqF,EAC3BD,EAAOrF,QAAhBJ,EADoC0F,EACpC1F,EAAGC,EADiCyF,EACjCzF,EAKF0F,EAAI,EAAGA,GAFG,IAEcA,IAAK,CACpC,GAHiB,MAGbA,EACF,MAAM,IAAIC,MAAM,wBAIlB,IADAvF,EAAYyC,EAAgB9B,EAAM+B,MAAO/B,EAAMgC,OAAQhC,EAAMuB,QAC/CvC,GAAGC,KAAOxC,EACtB,MAIJ,OAAO+G,OAAAe,EAAA,EAAAf,CAAA,GACFxD,EADL,CAEEX,cAOG,SAASwF,EAAS7E,EAAOyE,GAE9B,GAAIzE,EAAMd,YAAc7C,GAAW2D,EAAMd,YAAc5C,EACrD,OAAO0D,EAH6B,IAAA8E,EAMrBL,EAAOrF,QAAhBJ,EAN8B8F,EAM9B9F,EAAGC,EAN2B6F,EAM3B7F,EACL8F,EAAY/E,EAAMH,SAASb,GAAGC,GAGpC,GAAI8F,IAAcnI,GAAUmI,IAAclI,EACxC,OAAOmD,EAGT,IAAMgF,EAAWhF,EAAMX,UAAUL,GAAGC,GAGpC,GAAI+F,IAAatI,EAAM,CACrB,IAAMuI,EAA0BjF,EAAMH,SAASP,IAAI,SAACC,EAAQP,GAC1D,OAAOO,EAAOD,IAAI,SAACK,EAAMV,GACvB,OAAOe,EAAMX,UAAUL,GAAGC,KAAOvC,EAAOE,EAAS+C,MAK/CuF,EAActC,EAClB7F,EACAiC,EACAC,EACAgG,GAGF,OAAOzB,OAAAe,EAAA,EAAAf,CAAA,GACFxD,EADL,CAEEH,SAAUqF,EACVhG,UAAW3C,IAKf,IAAMsD,EACJmF,IAAavI,EAETyG,EAAqBlE,EAAGC,EAAGe,EAAMX,UAAWW,EAAMH,UAElD+C,EAAkBhG,EAAQoC,EAAGC,EAAGe,EAAMH,UAa5C,GAVqBA,EAAS0C,OAAO,SAAC4C,EAAK5F,EAAQP,GACjD,OACEmG,EACA5F,EAAOgD,OAAO,SAAC4C,EAAKxF,EAAMV,GACxB,OAAOU,IAAS/C,EAASuI,EAAM,EAAIA,GAClC,IAEJ,KAGkBnF,EAAMuB,MACzB,OAAOiC,OAAAe,EAAA,EAAAf,CAAA,GACFxD,EADL,CAEEH,WACAX,UAAW5C,IAKf,IAAM8I,EAAcvF,EAASP,IAAI,SAACC,EAAQP,GACxC,OAAOO,EAAOD,IAAI,SAACK,EAAMV,GACvB,OAAOe,EAAMX,UAAUL,GAAGC,KAAOvC,EAAOG,EAAUD,MAItD,OAAO4G,OAAAe,EAAA,EAAAf,CAAA,GACFxD,EADL,CAEEH,SAAUuF,EACVlG,UAAW1C,EACXgF,MAAOxB,EAAMuB,QAOV,SAAS8D,EAAMrF,EAAOyE,GAC3B,OAAOjB,OAAAe,EAAA,EAAAf,CAAA,GACFxD,EADL,CAEEsF,WAAW,IAOR,SAASC,EAAOvF,EAAOyE,GAC5B,OAAOjB,OAAAe,EAAA,EAAAf,CAAA,GACFxD,EADL,CAEE+B,MAAO0C,EAAOrF,QAAQ2C,MACtBC,OAAQyC,EAAOrF,QAAQoG,SAOpB,SAASC,EAASzF,EAAOyE,GAC9B,OAAOjB,OAAAe,EAAA,EAAAf,CAAA,GACFxD,EADL,CAEEuB,MAAOkD,EAAOrF,QAAQmC,QAOnB,SAASmE,EAAW1F,EAAOyE,GAChC,GAAIzE,EAAMd,YAAc7C,GAAW2D,EAAMd,YAAc5C,EACrD,OAAO0D,EAF+B,IAAA2F,EAKvBlB,EAAOrF,QAAhBJ,EALgC2G,EAKhC3G,EAAGC,EAL6B0G,EAK7B1G,EACL2G,EAAe5F,EAAMH,SAASb,GAAGC,GAEvC,GACE2G,IAAiBjJ,GACjBiJ,IAAiB/I,GACjB+I,IAAiB9I,EAEjB,OAAOkD,EAGT,IAGI6F,EAHAC,EAAe9F,EAAMwB,MAIzB,OAAQoE,GACN,KAAKjJ,EACHmJ,IACAD,EAAgBhJ,EAChB,MAGF,KAAKA,EACHiJ,IACAD,EAAgB/I,EAChB,MAGF,KAAKA,EACH+I,EAAgBlJ,EAChB,MAGF,QACE,MAAM,IAAIiI,MAAM,oBAIpB,IAAM/E,EAAW+C,EAAkBiD,EAAe7G,EAAGC,EAAGe,EAAMH,UAE9D,OAAO2D,OAAAe,EAAA,EAAAf,CAAA,GACFxD,EADL,CAEEH,WACA2B,MAAOsE,ICjNX,IAAMC,EAAeC,EAAoB,CACvCjE,MAAO,EACPC,OAAQ,EACRT,MAAO,GAEPlC,eAAW8D,EAGXtD,cAAUsD,EAEVjE,UAAW7C,EAEXmF,MAAO,IAIMyE,cAAY,WAAkC,IAAjCjG,EAAiC6D,UAAAC,OAAA,QAAAX,IAAAU,UAAA,GAAAA,UAAA,GAAzBkC,EAActB,EAAWZ,UAAAC,OAAA,EAAAD,UAAA,QAAAV,EAC3D,OAAO+C,YACL,CACEC,KAAMH,EACNI,kBAAmBJ,EACnBK,UAAWL,EACXM,MAAON,EACPO,OAAQP,EACRQ,UAAWR,EACXS,YAAaT,GAEfhG,EAVKkG,CAWLlG,EAAOyE,IACRiC,OAAOC,8BAAgCD,OAAOC,gCC5BjDC,IAASC,OACPxI,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CAAUC,MAAOA,GACf1I,EAAAC,EAAAC,cAACyI,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.f46d5cbf.chunk.js","sourcesContent":["/**\n * States of the game\n */\nexport const WAITING = 0;\nexport const PLAYING = 1;\nexport const LOSS = 2;\nexport const WIN = 3;\n","/**\n * Types of the cells\n * Items from 1 to 6 just calls as numbers\n */\nexport const EMPTY = 0;\nexport const MINE = 9;\n","/**\n * States of cells\n */\nexport const CLOSED = 0;\nexport const OPENED = 1;\nexport const FLAGGED = 2;\nexport const SUSPICIOUS = 3;\nexport const EXPLODED = 4;\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport './styles.css';\nimport { EMPTY, MINE } from '../../const/cells';\nimport {\n  CLOSED,\n  OPENED,\n  SUSPICIOUS,\n  FLAGGED,\n  EXPLODED\n} from '../../const/states';\n\nexport default class Cell extends Component {\n  componentDidMount() {\n    this.itemElement.addEventListener('contextmenu', this.onRightClick);\n  }\n\n  componentWillUnmount() {\n    this.itemElement.removeEventListener('contextmenu', this.onRightClick);\n  }\n\n  render() {\n    const content = this.getItemContentByType(this.props.type);\n    const classList = classNames(\n      'item',\n      this.getClassNameByState(this.props.itemState),\n      this.getClassNameByType(this.props.type)\n    );\n\n    return (\n      <div\n        className={classList}\n        onClick={this.props.onItemClick}\n        ref={el => (this.itemElement = el)}\n      >\n        <span className=\"item__content\">{content}</span>\n      </div>\n    );\n  }\n\n  /**\n   * Handles right click on cell\n   */\n  onRightClick = event => {\n    event.preventDefault();\n\n    if (typeof this.props.onItemRightClick === 'function') {\n      this.props.onItemRightClick(event);\n    }\n  };\n\n  /**\n   * Creates a content for the item\n   * @return {string}\n   */\n  getItemContentByType = type => {\n    switch (type) {\n      case MINE:\n        return '💣';\n      case EMPTY:\n        return '';\n      // As fallback returns numbers\n      default:\n        return type;\n    }\n  };\n\n  /**\n   * Returns the classname by state\n   * @return {string}\n   */\n  getClassNameByState = itemState => {\n    const prefix = 'item--';\n\n    switch (itemState) {\n      case OPENED:\n        return prefix + 'opened';\n      case EXPLODED:\n        return prefix + 'exploded';\n      case CLOSED:\n        return prefix + 'closed';\n      case SUSPICIOUS:\n        return prefix + 'closed ' + prefix + 'suspicious';\n      case FLAGGED:\n        return prefix + 'closed ' + prefix + 'flagged';\n      // Fallback is CLOSED\n      default:\n        return prefix + 'closed';\n    }\n  };\n\n  /**\n   * Returns class name by cell type\n   * @return {string}\n   */\n  getClassNameByType = type => {\n    if (type >= 1 && type <= 8) {\n      return 'item--' + type;\n    }\n\n    return '';\n  };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './styles.css';\nimport { WAITING } from '../../const/gameStates';\nimport Cell from '../Cell';\n\nclass Minesweeper extends Component {\n  render() {\n    return (\n      <div className=\"minefield\">\n        {this.props.minefield.map((column, x) => (\n          <div className=\"column\" key={'column_' + x}>\n            {Array.from(column).map((item, y) => (\n              <Cell\n                key={'item_' + y}\n                type={item}\n                itemState={this.props.statemap[x][y]}\n                onItemClick={this.openTheCell(x, y)}\n                onItemRightClick={this.onItemRightClick(x, y)}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  /**\n   * Handles item click\n   */\n  openTheCell = (x, y) => event => {\n    // Generate map with empty cell by specified coordinates\n    if (this.props.gameState === WAITING) {\n      this.props.dispatch({\n        type: 'MAKE_MAP_BY_POINT',\n        payload: { x, y }\n      });\n    }\n\n    this.props.dispatch({\n      type: 'OPEN_CELL',\n      payload: { x, y }\n    });\n  };\n\n  /**\n   * Handles item right click\n   */\n  onItemRightClick = (x, y) => event => {\n    this.props.dispatch({\n      type: 'TOGGLE_FLAG',\n      payload: { x, y }\n    });\n  };\n}\n\nexport default connect()(Minesweeper);\n","import React, { Component } from 'react';\nimport { WAITING, WIN, LOSS, PLAYING } from '../../const/gameStates';\n\nexport default class Timer extends Component {\n  state = {\n    timeStart: 0,\n    time: 0\n  };\n\n  componentWillReceiveProps(nextProps) {\n    const curGameState = this.props.gameState;\n    const nextGameState = nextProps.gameState;\n\n    if (curGameState !== WAITING && nextGameState === WAITING) {\n      // Ending the timer\n      clearInterval(this.interval);\n      // Waiting\n      this.setState({\n        timeStart: 0,\n        time: 0\n      });\n    } else if (curGameState !== PLAYING && nextGameState === PLAYING) {\n      // Starting the game\n      this.setState({\n        timeStart: Date.now(),\n        time: 0\n      });\n\n      this.interval = setInterval(this.timeUpdate, 10);\n    } else if (\n      curGameState !== WIN &&\n      curGameState !== LOSS &&\n      (nextGameState === WIN || nextGameState === LOSS)\n    ) {\n      // Ending the timer\n      clearInterval(this.interval);\n\n      if (typeof this.props.onTimerEnd === 'function') {\n        this.props.onTimerEnd(this.state.time);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <span>\n        {this.getMinutes(this.state.time)}:{this.getSeconds(this.state.time)}\n      </span>\n    );\n  }\n\n  /**\n   * Updates the time\n   */\n  timeUpdate = () => {\n    this.setState({\n      time: Date.now() - this.state.timeStart\n    });\n  };\n\n  /**\n   * Returns minutes from timestamp\n   * @param {number} timestamp\n   * @return {number} The minutes\n   */\n  getMinutes = timestamp => (timestamp / 60 / 1e3) | 0;\n\n  /**\n   * Returns seconds from timestamp\n   * @param {number} timestamp\n   * @return {string} The seconds to hundredths as string\n   */\n  getSeconds = timestamp => ((timestamp % (1000 * 60)) / 1000).toFixed(2);\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './styles.css';\nimport { WIN, LOSS } from '../../const/gameStates';\nimport Timer from '../Timer';\n\nclass Scoreboard extends Component {\n  render() {\n    const minesLeft = this.props.mines - this.props.flags;\n\n    return (\n      <div className=\"scoreboard\">\n        <div className=\"mines\">\n          {minesLeft} {/* declOfNum(minesLeft, ['бомба', 'бомбы', 'бомб']) */}\n        </div>\n\n        <div className=\"status\" onClick={this.startGame}>\n          {this.getEmojiByGameState(this.props.gameState, this.props.isHold)}\n        </div>\n\n        <div className=\"time\">\n          <Timer gameState={this.props.gameState} />\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Returns the emoji from the game state\n   * @param {number} gameState State of the game\n   * @param {boolean} isHold Flag of holding mouse button on some cell\n   * @return {string}\n   */\n  getEmojiByGameState = (gameState, isHold) => {\n    if (isHold) {\n      return '😲';\n    }\n\n    switch (gameState) {\n      case WIN:\n        return '😎';\n      case LOSS:\n        return '😵';\n      default:\n        return '🙂'; // WAITING and PLAYING\n    }\n  };\n\n  /**\n   * Starts/restarts the game\n   */\n  startGame = () => {\n    this.props.dispatch({\n      type: 'INIT'\n    });\n  };\n}\n\nexport default connect()(Scoreboard);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Minesweeper from '../Minesweeper';\nimport Scoreboard from '../Scoreboard';\nimport './styles.css';\n\nclass App extends Component {\n  render() {\n    const { minefield, statemap, gameState, mines, flags } = this.props;\n\n    return (\n      <div className=\"app\">\n        <div className=\"minefield-wrapper\">\n          <Scoreboard gameState={gameState} mines={mines} flags={flags} />\n\n          <Minesweeper\n            minefield={minefield}\n            statemap={statemap}\n            gameState={gameState}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  minefield: state.minefield,\n  statemap: state.statemap,\n  gameState: state.gameState,\n  mines: state.mines,\n  flags: state.flags\n});\n\nexport default connect(mapStateToProps)(App);\n","import { MINE, EMPTY } from '../const/cells';\n\n/**\n * Creates minefield with fixed size and fixed number of mines, but rundom\n * positions of mines\n * @param {number} width Width of minefield\n * @param {number} height Height of minefield\n * @param {number} mines Nuber of mines on the minefield\n * @return {Array<Uint8Array>}\n */\nexport default function createMineField(width, height, mines) {\n  // Limiting the mines\n  if (mines > width * height) {\n    return createMineField(width, height, width * height);\n  }\n\n  // Generate empty minefield\n  const minefield = new Array(width)\n    .fill(null)\n    .map(item => new Uint8Array(height));\n\n  // Generate mines on the map\n  let minesGenerated = 0;\n  while (minesGenerated < mines) {\n    const x = (Math.random() * width) | 0;\n    const y = (Math.random() * height) | 0;\n\n    // If mine is alredy in cell\n    if (minefield[x][y] === MINE) {\n      continue;\n    }\n\n    minefield[x][y] = MINE;\n    minesGenerated++;\n  }\n\n  // Offsets for calculating mines around items\n  const offsets = [\n    [-1, 0],\n    [-1, -1],\n    [-1, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n    [0, 1],\n    [0, -1]\n  ];\n\n  // Calculating the number of mines around each cell\n  const calculatedMap = minefield.map((column, x) => {\n    return column.map((item, y) => {\n      if (item !== EMPTY) {\n        return item;\n      }\n\n      // Counting mines arount item\n      return offsets.reduce((counter, offset) => {\n        const curX = x + offset[0];\n        const curY = y + offset[1];\n\n        return minefield[curX] && minefield[curX][curY] === MINE\n          ? counter + 1\n          : counter;\n      }, 0);\n    });\n  });\n\n  return calculatedMap;\n}\n","/**\n * Updates 2d matrix immutable. Returns new matrix with new cell value,\n * without mutation of the source matrix\n * @param {any} value New value of the cell of the matrix\n * @param {number} x X coordinate\n * @param {number} y Y coordinate\n * @param {any[][]} matrix The 2d array to change\n * @return {any[][]} The new matrix\n */\nexport default function updateMatrixValue(value, x, y, matrix) {\n  const columnCopy = matrix[x].slice();\n  columnCopy[y] = value;\n\n  const matrixCopy = matrix.slice();\n  matrixCopy[x] = columnCopy;\n\n  return matrixCopy;\n}\n","import { EMPTY } from '../const/cells';\nimport { OPENED, FLAGGED } from '../const/states';\nimport pipe from '../utils/pipe';\nimport updateMatrixValue from './updateMatrixValue';\n\n/**\n * The offsets of cells\n */\nconst offsets = [\n  [-1, 0],\n  [-1, -1],\n  [-1, 1],\n  [1, -1],\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, -1]\n];\n\n/**\n * Shows empty cells around the specified element\n * @param {number} x X-coodinate\n * @param {number} y Y-coordinate\n * @param {number[][]} minefield Minefield for getting types of cells\n * @param {number[][]} statemap Map of states for matating\n * @return {number[][]} Updated statemap\n */\nexport default function showEmptyCellsAround(x, y, minefield, statemap) {\n  if (statemap[x] === undefined || statemap[x][y] === undefined) {\n    return statemap;\n  }\n\n  if (statemap[x][y] === OPENED) {\n    return statemap;\n  }\n\n  // Open the cell\n  const statemapWithOpenedCell =\n    statemap[x][y] !== FLAGGED\n      ? updateMatrixValue(OPENED, x, y, statemap)\n      : statemap;\n\n  if (minefield[x][y] !== EMPTY) {\n    return statemapWithOpenedCell;\n  }\n\n  const functionsList = offsets.map(([offsetX, offsetY]) => {\n    return map =>\n      showEmptyCellsAround(x + offsetX, y + offsetY, minefield, map);\n  });\n\n  const updatedStateMap = pipe(...functionsList)(statemapWithOpenedCell);\n  return updatedStateMap;\n}\n","/**\n * Pipeline\n * @param {...Function} fns Any functions\n * @return {Function} Function for applying agrument to pipeline\n */\nexport default function pipe(...fns) {\n  return x => fns.reduce((v, f) => f(v), x);\n}\n","import createMineField from '../utils/createMineField';\nimport updateMatrixValue from '../utils/updateMatrixValue';\nimport showEmptyCellsAround from '../utils/showEmptyCellsAround';\nimport { OPENED, CLOSED, FLAGGED, EXPLODED, SUSPICIOUS } from '../const/states';\nimport { MINE, EMPTY } from '../const/cells';\nimport { WAITING, PLAYING, WIN, LOSS } from '../const/gameStates';\n\n/**\n * Initialization the minefield\n */\nexport function init(state) {\n  return {\n    ...state,\n    minefield: createMineField(state.width, state.height, state.mines),\n    statemap: Array(state.width)\n      .fill(undefined)\n      .map(column => new Uint8Array(state.height)),\n    gameState: WAITING,\n    flags: 0\n  };\n}\n\n/**\n * Makes map with empty cell by specified coordinates\n * That needs for first move\n */\nexport function makeMapByPoint(state, action) {\n  const { x, y } = action.payload;\n\n  let minefield;\n  const LOOP_LIMIT = 1e4;\n  // Making finite loop to prevent unexpected behavior\n  for (let i = 0; i <= LOOP_LIMIT; i++) {\n    if (i === LOOP_LIMIT) {\n      throw new Error('Error generating map');\n    }\n\n    minefield = createMineField(state.width, state.height, state.mines);\n    if (minefield[x][y] === EMPTY) {\n      break;\n    }\n  }\n\n  return {\n    ...state,\n    minefield\n  };\n}\n\n/**\n * Open cell\n */\nexport function openCell(state, action) {\n  // If game is not playing, return\n  if (state.gameState !== WAITING && state.gameState !== PLAYING) {\n    return state;\n  }\n\n  const { x, y } = action.payload;\n  const cellState = state.statemap[x][y];\n\n  // If cell is alredy opeend of flagged, do nothing\n  if (cellState === OPENED || cellState === FLAGGED) {\n    return state;\n  }\n\n  const cellType = state.minefield[x][y];\n\n  // If is mine, showing all mines\n  if (cellType === MINE) {\n    const statemapWithOpenedMines = state.statemap.map((column, x) => {\n      return column.map((item, y) => {\n        return state.minefield[x][y] === MINE ? OPENED : item;\n      });\n    });\n\n    // Mark exploded mine\n    const newStatemap = updateMatrixValue(\n      EXPLODED,\n      x,\n      y,\n      statemapWithOpenedMines\n    );\n\n    return {\n      ...state,\n      statemap: newStatemap,\n      gameState: LOSS\n    };\n  }\n\n  // Just open the cell\n  const statemap =\n    cellType === EMPTY\n      ? // Opening alll empty space\n        showEmptyCellsAround(x, y, state.minefield, state.statemap)\n      : // If is number, just open the cell\n        updateMatrixValue(OPENED, x, y, state.statemap);\n\n  // Counting closed cells\n  const closedNumber = statemap.reduce((acc, column, x) => {\n    return (\n      acc +\n      column.reduce((acc, item, y) => {\n        return item !== OPENED ? acc + 1 : acc;\n      }, 0)\n    );\n  }, 0);\n\n  // Just open the cell\n  if (closedNumber !== state.mines) {\n    return {\n      ...state,\n      statemap,\n      gameState: PLAYING\n    };\n  }\n\n  // If game is winned\n  const winStatemap = statemap.map((column, x) => {\n    return column.map((item, y) => {\n      return state.minefield[x][y] === MINE ? FLAGGED : OPENED;\n    });\n  });\n\n  return {\n    ...state,\n    statemap: winStatemap,\n    gameState: WIN,\n    flags: state.mines\n  };\n}\n\n/**\n * Starting the game\n */\nexport function start(state, action) {\n  return {\n    ...state,\n    isPlaying: true\n  };\n}\n\n/**\n * Resize the minefield\n */\nexport function resize(state, action) {\n  return {\n    ...state,\n    width: action.payload.width,\n    height: action.payload.heigth\n  };\n}\n\n/**\n * Set mines number\n */\nexport function setMines(state, action) {\n  return {\n    ...state,\n    mines: action.payload.mines\n  };\n}\n\n/**\n * Toggle flag\n */\nexport function toggleFlag(state, action) {\n  if (state.gameState !== WAITING && state.gameState !== PLAYING) {\n    return state;\n  }\n\n  const { x, y } = action.payload;\n  const curCellState = state.statemap[x][y];\n\n  if (\n    curCellState !== CLOSED &&\n    curCellState !== FLAGGED &&\n    curCellState !== SUSPICIOUS\n  ) {\n    return state;\n  }\n\n  let currentFlags = state.flags;\n\n  // Next cell state\n  let nextCellState;\n  switch (curCellState) {\n    case CLOSED: {\n      currentFlags++;\n      nextCellState = FLAGGED;\n      break;\n    }\n\n    case FLAGGED: {\n      currentFlags--;\n      nextCellState = SUSPICIOUS;\n      break;\n    }\n\n    case SUSPICIOUS: {\n      nextCellState = CLOSED;\n      break;\n    }\n\n    default: {\n      throw new Error('Unexpected state');\n    }\n  }\n\n  const statemap = updateMatrixValue(nextCellState, x, y, state.statemap);\n\n  return {\n    ...state,\n    statemap,\n    flags: currentFlags\n  };\n}\n","import { createStore } from 'redux';\nimport { handleActions } from 'redux-actions';\nimport * as actionHandlers from './actionHandlers';\nimport { WAITING } from '../const/gameStates';\n\n/** Initial state */\nconst initialState = actionHandlers.init({\n  width: 9,\n  height: 9,\n  mines: 10,\n  // The mine field, 2d matrix\n  minefield: undefined,\n  // The map of states of every item of minefield\n  // Empty 2d array on start\n  statemap: undefined,\n  // State of the game\n  gameState: WAITING,\n  // Counter of flags in the minefield\n  flags: 0\n});\n\n/** The store of application */\nexport default createStore((state = initialState, action) => {\n  return handleActions(\n    {\n      INIT: actionHandlers.init,\n      MAKE_MAP_BY_POINT: actionHandlers.makeMapByPoint,\n      OPEN_CELL: actionHandlers.openCell,\n      START: actionHandlers.start,\n      RESIZE: actionHandlers.resize,\n      SET_MINES: actionHandlers.setMines,\n      TOGGLE_FLAG: actionHandlers.toggleFlag\n    },\n    state\n  )(state, action);\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './views/App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}